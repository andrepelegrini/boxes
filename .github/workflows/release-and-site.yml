name: Build installers and publish download site

on:
  push:
    tags:
      - "v*.*.*"      # publica quando criar uma tag (ex.: v0.2.0)
  workflow_dispatch:  # permite rodar manualmente

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    name: Build installers (Windows, macOS, Linux)
    runs-on: ${{ matrix.os }}
    env:
      TAURI_SIGNING_REQUIRED: "false"
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: macos
          - os: windows-latest
            platform: windows
          - os: ubuntu-latest
            platform: linux
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install frontend deps
        run: npm ci

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Linux system deps (GTK/WebKit/GLib)
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev || sudo apt-get install -y libwebkit2gtk-4.0-dev
          sudo apt-get install -y \
            libgtk-3-dev libglib2.0-dev libayatana-appindicator3-dev \
            librsvg2-dev patchelf pkg-config build-essential

      - name: Build with Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: ${{ github.ref_name }}
          releaseDraft: false
          prerelease: false

      # Copia artefatos para montar o site
      - name: Gather built artifacts for site (Unix)
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
          mkdir -p "site/public/downloads/${{ matrix.platform }}"
          find src-tauri/target -type f \( -name "*.dmg" -o -name "*.app.tar.gz" -o -name "*.msi" -o -name "*.exe" -o -name "*.deb" -o -name "*.AppImage" \) \
            -exec cp {} "site/public/downloads/${{ matrix.platform }}/" \; || true

      - name: Gather built artifacts for site (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "site/public/downloads/${{ matrix.platform }}" | Out-Null
          Get-ChildItem -Path "src-tauri/target" -Recurse -Include *.dmg,*.app.tar.gz,*.msi,*.exe,*.deb,*.AppImage -ErrorAction SilentlyContinue |
            ForEach-Object { Copy-Item $_.FullName "site/public/downloads/${{ matrix.platform }}" -Force }

      - name: Upload site artifacts (per-platform)
        uses: actions/upload-artifact@v4
        with:
          name: downloads-${{ matrix.platform }}
          path: site/public/downloads/${{ matrix.platform }}

  website:
    name: Publish download site (GitHub Pages)
    runs-on: ubuntu-latest
    needs: build
    concurrency:
      group: pages
      cancel-in-progress: true
    environment:
      name: github-pages
    steps:
      - uses: actions/checkout@v4

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: downloads-macos
          path: site/public/downloads/macos

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: downloads-windows
          path: site/public/downloads/windows

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: downloads-linux
          path: site/public/downloads/linux

      - name: Setup Pages
        uses: actions/configure-pages@v5

      # Copia o site-fonte se existir e garante index.html na raiz e nos subdirs
      - name: Place static site files
        shell: bash
        run: |
          set -e
          mkdir -p site/public
          # Se houver site-src/, copia para site/public/
          if [ -d site-src ]; then
            cp -R site-src/* site/public/
          fi

          # 1) Garante index.html na RAIZ (se não existir)
          if [ ! -f site/public/index.html ]; then
            {
              echo '<!doctype html><meta charset="utf-8"><title>Downloads</title>'
              echo '<body style="font-family:system-ui;padding:32px;background:#0b0e10;color:#fff">'
              echo '<h1>Downloads do Project Boxes</h1>'
              echo '<ul>'
              echo '<li><a href="./downloads/windows/">Windows</a></li>'
              echo '<li><a href="./downloads/macos/">macOS</a></li>'
              echo '<li><a href="./downloads/linux/">Linux</a></li>'
              echo '</ul></body>'
            } > site/public/index.html
          fi

          # 2) Gera index.html dentro de cada pasta de downloads
          for os in windows macos linux; do
            dir="site/public/downloads/$os"
            mkdir -p "$dir"
            {
              echo '<!doctype html><meta charset="utf-8"><title>Downloads</title>'
              echo '<body style="font-family:system-ui;padding:24px;background:#0b0e10;color:#fff">'
              echo '<h2>Downloads: '"$os"'</h2><ul>'
              shopt -s nullglob
              for f in "$dir"/*; do
                [ -f "$f" ] || continue
                bn=$(basename "$f")
                echo '<li><a href="./'"$bn"'">'"$bn"'</a></li>'
              done
              echo '</ul><p><a href="../../index.html" style="color:#F5D16D">&larr; Voltar</a></p></body>'
            } > "$dir/index.html"
          done

          echo "Árvore do site publicado:"
          find site/public -maxdepth 3 -type f | sed 's/^/ - /'

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
